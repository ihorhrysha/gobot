#!/bin/bash

# Check if the pre-commit hook is enabled
HOOK_ENABLED=$(git config --bool hooks.gitleaks)
if [ "$HOOK_ENABLED" != "true" ]; then
  echo "Pre-commit hook for gitleaks is disabled. Enable it with:"
  echo "git config hooks.gitleaks true"
  exit 0
fi

# Function to install gitleaks
install_gitleaks() {
  echo "Installing gitleaks..."
  LATEST_RELEASE=$(curl -L -s https://api.github.com/repos/zricethezav/gitleaks/releases/latest | grep "tag_name" | cut -d '"' -f 4)

  ARCH=$(uname -m)

  if [[ "$ARCH" == "x86_64" ]]; then
    RELEASE_ARCH="x64"
  elif [[ "$ARCH" == "arm64" ]]; then
    RELEASE_ARCH="arm64"
  else
    echo "Unsupported architecture: $ARCH"
    exit 1
  fi

  if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    RELEASE_OS="linux"
  elif [[ "$OSTYPE" == "darwin"* ]]; then
    RELEASE_OS="darwin"
  else
    echo "Unsupported OS: $OSTYPE"
    exit 1
  fi

  DOWNLOAD_URL="https://github.com/zricethezav/gitleaks/releases/download/$LATEST_RELEASE/gitleaks_${LATEST_RELEASE#v}_${RELEASE_OS}_${RELEASE_ARCH}.tar.gz"

  curl -sL $DOWNLOAD_URL -o gitleaks.tar.gz
  tar -xzf gitleaks.tar.gz gitleaks
  chmod +x gitleaks
  mv gitleaks /usr/local/bin/gitleaks
  rm gitleaks.tar.gz
}

# Check if gitleaks is installed, if not, install it
if ! command -v gitleaks &> /dev/null; then
  install_gitleaks
fi

# Run gitleaks
echo "Running gitleaks..."
gitleaks detect --source . --verbose
RESULT=$?

if [ $RESULT -ne 0 ]; then
  echo "gitleaks detected leaks. Commit aborted."
  exit 1
fi

exit 0